rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Fonction pour vérifier si l'utilisateur est connecté
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Fonction pour vérifier si l'utilisateur accède à ses propres données
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Fonction pour vérifier si l'utilisateur est un vendeur
    function isVendor(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
        get(/databases/$(database)/documents/users/$(userId)).data.type == 'vendor';
    }
    
    // Accès aux données utilisateur
    match /users/{userId} {
      allow read: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Accès aux données vendeur
    match /vendors/{vendorId} {
      // Lecture publique pour les informations des vendeurs
      allow read: if isAuthenticated();
      
      // Seuls les propriétaires peuvent modifier leurs données
      allow create: if isAuthenticated() && 
                    isVendor(request.auth.uid) && 
                    request.resource.data.user_id == request.auth.uid;
                    
      allow update: if isAuthenticated() && 
                    isVendor(request.auth.uid) && 
                    resource.data.user_id == request.auth.uid;
                    
      allow delete: if isAuthenticated() && 
                    isVendor(request.auth.uid) && 
                    resource.data.user_id == request.auth.uid;
    }
    
    // Accès aux avis et évaluations
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && resource.data.user_id == request.auth.uid;
    }
  }
}